package JavaLinkedList;

public class SinglyLinkedList<T> {
    // 1. 노드 클래스 정의
    public static class Node<T> {
        // 노드 = 데이터 저장 변수(data) + 노드 가리키는 링크(next)
        T data; //데이터
        Node<T> next;//링크

        // 생성자
        Node(T data) { 
            this.data = data;
            this.next = null;
        }
    }

    // 2. 헤드 노드(첫번째 노드) 정의
    private Node<T> head;

    //생성자
    public SinglyLinkedList() {
        this.head = null; //초기에는 빈 리스트
    }

    // 3. 데이터 삽입 메서드 구현

    //맨 앞에 삽입
    public void insertFront(T data) {
        Node<T> newNode = new Node<>(data); // 리스트 생성
        newNode.next = head; //새로운 노드의 다음값에 현재 헤드 할당(새로운 노드 맨앞에 삽입됨)
        head = newNode; //헤드를 새로운 노드로 갱신
        
    }

    //중간에 삽입 => 노드(데이터+링크) 
     public void insertMiddle(Node<T> prev, T data) {
        if(prev == null) {
            System.out.println("이전 노드가 null일 수 없습니다."); //null이면 중간 삽입이라 볼 수 없다
            return;
        }
        Node<T> newNode = new Node<>(data);
        newNode.next = prev.next; //새로운 노드의 다음 노드로 이전 노드의 다음노드
        prev.next = newNode; //이전 노드의 다음 노드로 새로운 노드를 할당
     
     }

    //맨 뒤에 삽입
     public void insertBack(T data) {

        Node<T> newNode = new Node<>(data); // 리스트 생성

        if (head == null) { //빈 리스트인 경우
            head = newNode; // 새로운 노드를 헤드로 설정
        } else { //값이 있는 리스트인 경우
            Node<T> current = head; //현재 노드에 헤드 할당

            //현재 노드가 마지막 노드가 될 때까지 이동
            while (current.next != null) {
                current = current.next;
            }

            //현재 노드의 다음에 새로운 노드 추가
            current.next = newNode;
        }
    }
    
    //4. 리스트에서 데이터 삭제
    public void delete(T data) {
        if(head == null) { //빈 리스트인 경우 아무것도 안함
            return;
        }

        if(head.data.equals(data)){ //헤드 노드를 삭제하는 경우
            head = head.next; //기존 헤드에 다음값으로 덮어씀
            return;
        }

        Node<T> current = head;
        while(current.next != null && !current.next.data.equals(data)) { // 다음 노드가 있을 때
            current = current.next;  //삭제할 데이터 찾을 때까지 이동
        }

        if (current.next != null) {
            current.next = current.next.next; //삭제할 노드의 다음 노드를 건너 뛰어 연결
        }
    }

    // 5. 데이터 출력 메서드 구현
    public void display() {
        Node<T> current = head; // 링크드리스트에 첫 번째 노드 대입

        while (current != null) { // 연결리스트에 값이 있다면 true
            System.out.print(current.data + " "); // 연결리스트 data 출력
            current = current.next; // 연결리스트에 다음 값 대입
        }
        System.out.println(); // 개행
    }

    //테스트
    public static void main(String[] args) {
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        
       // 데이터 삽입 (맨 뒤에 추가)
        list.insertBack(1);
        list.insertBack(3);

        // 데이터 삽입 (맨 앞에 추가)
        list.insertFront(0);

        // 데이터 삽입 (중간에 추가)
        Node<Integer> prev = list.head.next;
        list.insertMiddle(prev, 2);

        // 데이터 출력
        System.out.println("삽입 후 리스트:");
        list.display();

        // 데이터 삭제
        list.delete(2);

        // 삭제 후 데이터 출력
        System.out.println("삭제 후 리스트:");
        list.display();
    }
}
